service: PipelineDashboardApi

provider:
  name: aws
  runtime: nodejs6.10
  region: eu-west-2
  environment:
    AUTH0_CLIENT_ID: ${file(./config.json):envars.AUTH0_CLIENT_ID}
    AUTH0_CLIENT_SECRET: ${file(./config.json):envars.AUTH0_CLIENT_SECRET}

functions:
  auth:
    handler: auth/handler.auth
  elasticsearch:
    handler: environments/elastic.search
    events:
      - http:
          path: elasticsearch
          method: get
          integration: lambda-proxy
          cors: true
  publicEnvironmentList:
    handler: environments/list.public
    events:
      - http:
          path: environments
          method: get
          integration: lambda-proxy
          cors: true
  environmentList:
      handler: environments/list.private
      events:
        - http:
            path: environments/list
            authorizer: auth
            method: get
            integration: lambda
            cors:
              origins:
                - '*'
              headers:
                - Content-Type
                - X-Amz-Date
                - Authorization
                - X-Api-Key
                - X-Amz-Security-Token
  environmentGet:
    handler: environments/get.get
    events:
      - http:
          path: environments/{id}
          integration: lambda
          authorizer: auth
          method: get
          request:
            parameters:
              paths:
                id: true
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
  environmentCreate:
    handler: environments/create.create
    events:
      - http:
          path: environments
          integration: lambda
          authorizer: auth
          method: post
          response:
            template: $input.path('$')
            headers:
              Content-Type: "'application/json'"
            statusCodes:
              201:
                pattern: ''
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
  environmentUpdate:
    handler: environments/update.update
    events:
      - http:
          path: environments/{id}
          integration: lambda
          authorizer: auth
          method: patch
          request:
            parameters:
              paths:
                id: true
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
  tokenCreate:
    handler: environments/tokens/create.create
    events:
      - http:
          path: environments/{id}/tokens
          integration: lambda
          authorizer: auth
          method: post
          response:
            template: $input.path('$')
            headers:
              Content-Type: "'application/json'"
            statusCodes:
              201:
                pattern: ''
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
  tokenDelete:
    handler: environments/tokens/delete.delete
    events:
      - http:
          path: environments/{id}/tokens/{tokenId}
          integration: lambda
          authorizer: auth
          method: delete
          response:
            template: $input.path('$')
            headers:
              Content-Type: "'application/json'"
            statusCodes:
              204:
                pattern: ''
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
  tokenList:
    handler: environments/tokens/list.list
    events:
      - http:
          path: environments/{id}/tokens
          authorizer: auth
          method: get
          integration: lambda
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
  deployedList:
    handler: environments/deployed/list.list
    events:
      - http:
          path: environments/{id}/deployed
          authorizer: auth
          method: get
          integration: lambda
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
  deployedCreate:
    handler: environments/deployed/create.create
    events:
      - http:
          path: environments/{id}/deployed/{tokenId}
          method: post
          integration: lambda
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token

plugins:
  - serverless-dynamodb-local
  - serverless-offline

custom:
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
    migration:
      dir: offline/migrations

resources:
  Resources:
    EnvironmentsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        TableName: ${file(./config.json):dynamodb.environments.table}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    DeployedDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        TableName: ${file(./config.json):dynamodb.deployed.table}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
